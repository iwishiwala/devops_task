name: Deploy to ECS

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: takehome-app
  ECS_SERVICE: takehome-eks-service
  ECS_CLUSTER: takehome-eks
  ECS_TASK_DEFINITION: takehome-eks-task
  CONTAINER_NAME: app

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: .aws/task-definition.json
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Get ECS Service URL
      id: get-url
      run: |
        ALB_DNS=$(aws elbv2 describe-load-balancers \
          --names takehome-eks-alb \
          --query 'LoadBalancers[0].DNSName' \
          --output text)
        echo "url=http://$ALB_DNS" >> $GITHUB_OUTPUT
        echo "🚀 Application deployed successfully!"
        echo "🌐 Application URL: http://$ALB_DNS"

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('🚀 Application deployed successfully!')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              issue_number: context.issue.number,
              comment_id: botComment.id,
              body: `🚀 Application deployed successfully!\n🌐 Application URL: ${{ steps.get-url.outputs.url }}\n📦 Image: ${{ steps.build-image.outputs.image }}`
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              issue_number: context.issue.number,
              body: `🚀 Application deployed successfully!\n🌐 Application URL: ${{ steps.get-url.outputs.url }}\n📦 Image: ${{ steps.build-image.outputs.image }}`
            });
          }
